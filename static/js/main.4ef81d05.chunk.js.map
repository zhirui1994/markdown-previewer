{"version":3,"sources":["test.md","components/MarkdownPreviewer/style.module.scss","components/MarkdownPreviewer/index.js","App.js","serviceWorker.js","index.js","App.module.scss"],"names":["module","exports","markdownPreviewer","marked","setOptions","highlight","code","hljs","highlightAuto","value","MarkdownPreviewer","handleInput","e","onChange","_this","props","editor","preventDefault","preview","innerHTML","defaultValue","this","_this2","react_default","a","createElement","className","styles","id","spellCheck","ref","textarea","onInput","section","Component","App","header","main","components_MarkdownPreviewer","editorDefault","Date","getFullYear","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0EAAAA,EAAAC,QAAA,uiBCCAD,EAAAC,QAAA,CAAkBC,kBAAA,wSCKlBC,IAAOC,WAAW,CACdC,UAAW,SAACC,GACR,OAAOC,IAAKC,cAAcF,GAAMG,aAsCzBC,6MAjCXC,YAAc,SAACC,GAAM,IACTC,EAAaC,EAAKC,MAAlBF,SACFJ,EAAQK,EAAKE,OAAOP,MAC1BG,EAAEK,iBACkB,oBAAbJ,GAA2BA,EAASJ,GAC3CK,EAAKI,QAAQC,UAAYhB,IAAOM,uFAGhB,IACRW,EAAiBC,KAAKN,MAAtBK,aACRC,KAAKH,QAAQC,UAAYhB,IAAOiB,oCAG3B,IAAAE,EAAAD,KACGD,EAAiBC,KAAKN,MAAtBK,aACR,OACIG,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOzB,mBACnBqB,EAAAC,EAAAC,cAAA,YACIG,GAAG,SACHC,WAAW,QACXC,IAAK,SAAAC,GAAQ,OAAIT,EAAKN,OAASe,GAC/BX,aAAcA,EACdY,QAASX,KAAKV,cAElBY,EAAAC,EAAAC,cAAA,WACIG,GAAG,UACHE,IAAK,SAAAG,GAAO,OAAIX,EAAKJ,QAAUe,aA3BnBC,aCUjBC,mLAfP,OACAZ,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAOQ,KACnBZ,EAAAC,EAAAC,cAAA,UAAQC,UAAWC,IAAOS,QACtBb,EAAAC,EAAAC,cAAA,uDACAF,EAAAC,EAAAC,cAAA,yCAEJF,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAOU,MACtBd,EAAAC,EAAAC,cAACa,EAAD,CAAmBlB,aAAcmB,OAEnChB,EAAAC,EAAAC,cAAA,gCAAoB,IAAIe,MAAOC,cAA/B,oBAXMP,aCOEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,kECZNC,IAASC,OAAOzB,EAAAC,EAAAC,cAACwB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,kCElInBzD,EAAAC,QAAA,CAAkBkC,IAAA","file":"static/js/main.4ef81d05.chunk.js","sourcesContent":["module.exports = \"# 一级标题\\r\\n## 二级标题\\r\\n### 三级标题\\r\\n#### 四级标题\\r\\n##### 五级标题\\r\\n###### 六级标题\\r\\n\\r\\n## 表格\\r\\n\\r\\na|b|c|d\\r\\n-|-|-|-\\r\\n1|2|3|4\\r\\n5|6|7|8\\r\\n\\r\\n## 代码\\r\\n\\r\\n```javascript\\r\\nvar a = 3;\\r\\nvar b = 5;\\r\\nfunction add(a, b) {\\r\\n    return a+b;\\r\\n}\\r\\n\\r\\nconsole.log(add(a, b)); // 8\\r\\n```\\r\\n\\r\\n## 列表\\r\\n以下：\\r\\n1. fdfsjsald\\r\\n2. fasdlfjafas\\r\\n3. fa'dfjlsf\\r\\n\\r\\n\"","// extracted by mini-css-extract-plugin\nmodule.exports = {\"markdownPreviewer\":\"style_markdownPreviewer__1fP6_\"};","import React, { Component } from 'react';\nimport marked from 'marked';\nimport styles from './style.module.scss';\nimport hljs from 'highlight.js';\nimport 'highlight.js/styles/github-gist.css';\n\nmarked.setOptions({\n    highlight: (code) => {\n        return hljs.highlightAuto(code).value;\n    }\n})\n\nclass MarkdownPreviewer extends Component {\n    handleInput = (e) => {\n        const { onChange } = this.props;\n        const value = this.editor.value;\n        e.preventDefault();\n        typeof onChange === 'function' && onChange(value);\n        this.preview.innerHTML = marked(value);\n    }\n\n    componentDidMount() {\n        const { defaultValue } = this.props;\n        this.preview.innerHTML = marked(defaultValue);\n    }\n\n    render() {\n        const { defaultValue } = this.props;\n        return (\n            <div className={styles.markdownPreviewer}>\n                <textarea\n                    id=\"editor\"\n                    spellCheck=\"false\"\n                    ref={textarea => this.editor = textarea}\n                    defaultValue={defaultValue}\n                    onInput={this.handleInput}\n                ></textarea>\n                <section\n                    id=\"preview\"\n                    ref={section => this.preview = section}\n                ></section>\n            </div>\n        );\n    }\n}\n\nexport default MarkdownPreviewer;\n","import React, { Component } from 'react';\nimport styles from './App.module.scss';\nimport editorDefault from './test.md';\nimport MarkdownPreviewer from './components/MarkdownPreviewer';\n\nclass App extends Component {\n    render() {\n        return (\n        <div className={styles.App}>\n            <header className={styles.header}>\n                <h1>freeCodeCamp Front End Libraries Projects</h1>\n                <h2>Build a Markdown Previewer</h2>\n            </header>\n            <main className={styles.main}>\n              <MarkdownPreviewer defaultValue={editorDefault} />\n            </main>\n            <footer>Copyright ©{new Date().getFullYear()} Roy Zhi</footer>\n        </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.scss'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__1clrg\"};"],"sourceRoot":""}